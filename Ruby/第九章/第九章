第八章　繰り返し処理を学ぼう

１、gets：キーボード入力された値を取得するメソッド

 「getsを使うと、キー入力待ちの状態になり、
 　文字を入力してEnterキーを押すまで次に進みません。
　getsで入力した値は、文字列として返されます。

(例)
puts "キーボードから何か入力してみましょう"
input_key = gets
puts "入力された内容は"+input_key
例：「hello」と入力

実行結果：

入力された内容はhello

-----------------------------------------------------
２、to_i：文字列を整数に変換するメソッド

　getsで入力された値は文字列になってしまい、正しい計算ができなくなります。
　そこで、to_iを使って文字列（String）を整数（Integer）に変換します。

文字列を計算するには、getsで値を取得し、
.to_iで整数に変換してから計算します。

(例)getsとto_iを使って足し算する。

puts "キーボードで数字「2」と数字「3」を入力してください"
a=gets.to_i
b=gets.to_i
puts "a+b=#{a+b}"

例：「2」と入力後Enterを押して「3」と入力後Enterを押します。

実行結果：a+b=5

-----------------------------------------------------
💌３、while文：繰り返し処理を行いたいときに使う。

　指定した条件式が真（true）の間、繰り返し実行されます。


♦️while　条件　do #条件がtrueの間
  処理 #処理を繰り返す
　end

while ～ do　を記述することで、
whileからendまでの処理が繰り返し実行されます。


(例)サイコロを振って「6」が出るまで繰り返し実行されます。

dice = 0　# diceに0を代入し、初期値を設定する
while dice != 6 do #サイコロの目が6ではない間、diceの初期値は0なので条件を満たす。以降はdiceに代入される数によって結果が異なる
  dice = rand(1..6) #1～6の数字がランダムに出力される
  puts dice
end


----------------------------------------------------------------
４、for文：順番に繰り返し処理を行いたいときに使う。

　while文では、指定した条件によって繰り返しの有無が判断されます。
　一方、for文では、指定したオブジェクトから順に値を取り出しながら
　繰り返されます。


♦️for 変数 in 範囲、ハッシュ、配列などを指定 do
    処理
　end

(例)for ～ end内で、1から10まで順番に表示する処理を繰り返し行う。
for i in 1..10 do # 1..10は、1～10までの範囲を表す
　puts i
end

----------------------------------------------------------------
４、eachメソッド：オブジェクト内の要素を順に取り出すメソッド。

♦️（範囲、ハッシュ、配列などを指定）.each do |変数|
  実行する処理
　end


(例)fapple、strawberry、orangeの単価をeachメソッドを用いて出力

apple： 130
strawberry：180
orange：100

{"apple"=>130, "strawberry"=>180, "orange"=>100}.each do |fruit, price|　#ハッシュの内容を順にキーをfruit、値をpriceに代入して繰り返す
　puts "#{fruit}は#{price}円です"　#変数展開

実行結果：
appleは130円です。
strawberryは180円です。
orangeは100円です。

----------------------------------------------------------------
５、break：繰り返し処理を中断する.

　whileやfor、eachなどの繰り返し文の中で利用します。

♦️
i = 0
while i <= 10 do
  if i >5
    break #iが5より大きくなると繰り返しから抜ける
  end
  puts i
  i += 1
end
