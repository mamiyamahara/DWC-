第九章　FizzBuzzプログラムを作ってみよう

１、FizzBuzzプログラムとは

 もともとはシンプルなパーティゲームです。
 このFizzBuzzを、プログラムコードとして画面上に出力できるかどうかで
 プログラマーの技術力がわかるため、コーディング面接の題材として
 よく使われています。

♦️FizzBuzzプログラムは、以下のような挙動をするプログラムです。

「3」で割り切れる数値を引数に渡すと、 'Fizz' を返す
「5」で割り切れる数値を引数に渡すと、 'Buzz' を返す
「3」と「5」の両方で割り切れる数値を引数に渡すと、 'FizzBuzz' を返す
それ以外の数値は、その数値を文字列に変えて返す


①メソッドを定義する
　メソッドを定義するには、実行する処理内容をdef ～ end 内に記述します。

dif メソッド名(引数)　#引数は任意
　　# 実行する処理内容
end

プログラムは、上から下に順番に処理されます。このため、自分で定義したメソッドを使うには、定義の後に記述します。

-----------------------------------------------------
２、引数

　メソッドを呼び出す際、メソッドに渡す値のことです。
　通常、メソッド名(引数) の形で記述しますが、( ) は省略も可能です。
　メソッドを定義した側で好きな変数名をつけられます。

(例)greetingメソッド内に、nameという名の引数を使う。

def greeting(name)
    "Hello, #{name}!"  # nameの中には、文字列'John'が入っている
end

puts greeting("John")　# ここでは'John'を引数として渡している


-----------------------------------------------------
３、戻り値=実行結果

　メソッドが呼ばれたときに返ってくる値のこと。
　def ～ end 処理内の最終結果が戻り値になる。

----------------------------------------------------------------
４、returnによる戻り値

　戻り値は、returnを使って明示的に指定することもできます。
　returnを省略した場合は、「最終結果」が戻り値になります。
　条件分岐などで戻り値が変わる場合は、意図したとおりに返せるようにしましょう

----------------------------------------------------------------
４、to_iメソッド、to_sメソッド

♦️to_i メソッドを使うことで、 文字列から整数へ変換できます。
♦️to_s メソッドを使うことで、整数から文字列へ変換できます。


(例)to_iメソッド
puts 10 + "1".to_i ⇒ 実行：11

(例)to_sメソッド

puts 10.to_s + "1" ⇒ 実行：101


----------------------------------------------------------------
５、getsメソッド

　キーボードから値を入力してプログラムを実行するときは、getsメソッドを使う。
　getsメソッドで入力された文字は、文字列として扱われます。

----------------------------------------------------------------
６、if文

　if、elsif、elseを組み合わせることで、
　複数の条件で処理を分岐させることができます。

♦️if 条件 A
　　条件Aがtrueだった場合の処理

♦️elsif 条件 B
　　条件Bがtrueだった場合の処理

♦️else
　　条件Aと条件Bが共にfalseだった場合の処理
end

----------------------------------------------------------------
７、==演算子

　右辺と左辺が等しい場合はtrue、等しくない場合はfalseを返します。

(例)puts 1 == 2
　　実行結果：false

　　puts 1 == 1
   実行結果：true

----------------------------------------------------------------
８、%演算子

　%演算子を使うことで、割り算の余りが求められます。

(例)puts 8 % 3
　　実行結果：2

　　puts 5 % 5
   実行結果：0




