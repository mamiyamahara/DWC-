第一章　フレームワーク

１、Rubyとは
「ひな形」のことで、アプリケーション開発に必要な細々した機能を簡単な手順で設定できるようになっています。
 必要な機能があらかじめ用意されているので、ルールに従って記述していくだけで、
 プログラムを一つひとつ書くよりも効率的にWebアプリケーションを開発できます。

♦️生産性が向上する
　あらかじめ基本的な構造が組まれているので、必要最低限のプログラミングだけで済ませられます。
　記述するコード量は、フレームワークを使わなかった場合とではまったく違います。
　よりコンパクトに記述できるので、機能開発の生産性も向上します。

♦️メンテナンスしやすい
　フレームワークには、記述ルールがあります。
　ルールに従ってコードを書くので、一貫性を保ちやすくなります。
　不具合や仕様変更があった場合も、どこに問題があるのか＆どこを変更すればよいのか特定しやすくなります。

　Railsには「CoC（設定より規約）」という設計思想があります（後述）。
　規約に従うことで誰でも似たようなコードを書けるので、メンテナンスしやすくなります

♦️品質を維持できる
 Ruby on Railsは、オープンソースのWebアプリケーションフレームワークです。
「オープンソース」とは、ソースコードが無償で公開されていて、誰でも自由に閲覧したり編集を行える状態のことです。
 世界中の大勢の人によって利用実績が積み上げられ、今も改善され続けています。
 最善の状態で品質を維持しやすいのも大きな特徴です。

----------------------------------------------------------------------------------
２、MVC（Model View Controller）

　Webアプリケーションでは、さまざまな処理が行われています。
　中でも、ユーザーインタフェースの処理は、データ処理とは性質が大きく異なります。
　両者を混ぜて記述してしまうと、コードが複雑になってわかりにくくなり、保守性が悪くなってしまいます。
　このため、Ruby on Railsでは、Model、View、Controllerの3つの処理パターンに分けて管理しています。

♦️Model（モデル）
　アプリケーション固有のデータを扱う部分です。
　データベース（後述）に対して、データの登録や取得、更新、削除などの処理を行います。

♦️View（ビュー）
　PCの画面（ユーザインタフェース）に関わる部分です。ブラウザに表示させるHTMLを実際に組み立てます。

♦️Controller（コントローラ）
　モデルやビューを統合的に制御する部分です。
　ユーザーからのリクエストを受けて、Modelと連携したり、
　どの画面（View）を表示するのかといったことを制御します。

　このように、Ruby on Railsでは、プログラムの構造をMVCの役割によって分けることで、
　プログラムのメンテナンス性を向上させたり、複数人で開発するときに影響する箇所を限定できるようになっています。

-------------------------------------------------------------------------
２、Ruby on Railsの2つの設計理念
　Ruby on Railsには、「DRY」と「CoC」という、2つの大きな設計理念があります。

♦️DRY（Don't Repeat Yourself）
　DRYは、「Don't Repeat Yourself（同じ記述を繰り返さない）」の意味です。
　同じコードや似たようなコードがあちこち散らばると、メンテナンスや修正がしにくくなります。

　たとえば、消費税の計算を複数に書いた場合、税率が変更されたときは複数を同じように修正しなければなりません。
　複数の修正では、修正漏れが発生する可能性が高くなります。
　税率計算を1ヵ所にまとめておけば、1ヵ所を修正するだけで済み、間違いは起こりません。

　コードも同様に、似たようなコードを1ヵ所にまとめることで、
　修正が必要になったときでも1ヵ所を修正するだけで済ませられるので、
　ミスを最小限に抑えられます。

♦️CoC（Convention over Configuration）
　CoCは、「Convention over Configuration（設定より規約）」の意味で、
　開発者が考えたり決定すべきことを極力少なくして、ロジックに集中させる思想のことです。

　アプリケーションの設定を行うファイルや項目は、増えれば増えるほど仕組みが複雑化していきます。
　CoCの思想を徹底することで、アプリケーションの実装に集中できるようになります。

Ruby on Railsは、このDRYやCoCの思想を徹底させることで、開発者の余計な手間を減らし、
保守しやすいWebアプリケーション開発環境を生み出しているのです。




















