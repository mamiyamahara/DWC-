第三章　Railsでアプリケーションを開発しよう

【手順まとめ】
手順をまとめます。

１. Railsアプリケーションのひな形を作成する
２. 作成したフォルダへ移動する
３. コントローラーを作成する
４. アクションを定義する
５. ルーティングを設定する
６. ビューファイルを作成する
７. アプリケーションサーバを起動する
８. URLにアクセスする
９. アプリケーションサーバを停止する


１、仮想環境の共有フォルダへ移動する
♦️自分のPC上の共有フォルダの場所　：　~/Desktop/work/vagrant

♦️仮想PCの共有フォルダ　：　/home/vagrant/work
 [vagrant@localhost work]$ と表示されていればOK。

------------------------------------------------------------
２、作業終了時
♦️仮想環境からのログアウト　：　$ exit
　　ログアウトしても、Vagrant自体は起動したままです。
　　PCのメモリ消費や負荷が気になるときは、Vagrantをシャットダウンしましょう。

♦️仮想環境のシャットダウン　：　$ vagrant halt
　　仮想環境からログアウトした状態のターミナルで上記コマンドを実行。

♦️仮想環境の休止　：　$ vagrant suspend
　　仮想環境のシャットダウン、休止した場合は、
　　仮想環境を起動する（vagrant up）ところからやり直してください。

------------------------------------------------------------
３、Railsアプリのひな形を作成する（rails new）

♦️$ rails new アプリケーション名
　Railsアプリケーションのひな形（アプリケーションの基本形）が作成されます。

♦️$ rm -rf アプリケーション名
　アプリケーションの削除コマンド

-----------------------------------------------------------------------------------
４、作成されたファイルを確認する
♦️configフォルダ内のroutes.rbファイル：URLとコントローラ（アクション）を紐づける
♦️controllersフォルダ内のファイル：ユーザーからのリクエストを受け付ける司令塔
♦️viewsフォルダ内のファイル：Webページに表示される内容

-----------------------------------------------------------------------------------
５、sample_appディレクトリへ移動する

sample_appディレクトリを作成できたので、以下を入力して移動しましょう。
[vagrant@localhost work]$ cd sample_app/


-----------------------------------------------------------------------------------
６、railsでページを表示する。
Railsでページを表示するには、まず、Controller（コントローラ）を作成する必要があります。

①コントローラの役割
コントローラでは、ユーザーのリクエストを受けてModelと連携したり、どの画面（View）を表示するかを制御しています。
ユーザーがURLにアクセスしたときに、リクエストを最初に受け取るのがコントローラです。
受け取ったリクエストを元にして、Modelからのデータを、対応するViewに渡して画面を表示させます。


具体的には、以下のような制御を行っています。

♦️Modelとやり取りする
♦️Viewに渡すインスタンス変数を定義する
♦️表示するViewファイルを指定する


②コントローラの作成コマンド 
⭐️rails g controller コントローラ名⭐️
　rails g は、rails generateの略


③コントローラの命名規則
コントローラにも、命名規則があります。
以下のような命名規則に従った形で記述する必要があります。
コントローラ名以外は、自動的に決まります。

種類	　　　　　　　　　　　　　　概要　　　	　　　　　　　　名前例
コントローラ名	　　　　　　　　　複数形、先頭は英小文字	　　　　homes
コントローラのクラス名　　　　　　　　複数形、先頭は英大文字	　　　　HomesController
ファイル名	　　　　　　　　　　　　　　複数形、先頭は英小文字	　　　　homes_controller.rb


③コントローラの削除コマンド 
⭐️$ rails d controller コントローラ名⭐️


④コントローラ内にアクションを追加する
action（アクション）は、コントローラに定義されている処理内容です。
ユーザーが実際に呼び出して使います。コントローラは全体を統括して制御しているのに対し、
アクションは制御内の一つひとつの処理を担当しています。

⑤コントローラのファイルを開く
app→controller→コントローラー名_controller.rb

⑥topアクションを定義する
topページを表示するアクションを記述します。defは「define」の略で、「定義する」という意味です。

class HomesController < ApplicationController
  def top 
  end
end

-----------------------------------------------------------------------------------
７、ルーティングを設定する
routing（ルーティング）では、ユーザが特定のURLにアクセスしたときに、
どのコントローラのどのアクションに処理を振り分けるかを定義します。
ルーティングは、URLとアクションを結びつける役目をしています。
たとえば、「あるURLにアクセスがあったときに、
rootコントローラのtopアクションの処理を振り分ける」定義を、ルーティングに記述します。

①ルーティングの記述場所
⭐️ルーティングの設定は、configフォルダ内の　routes.rbファイル　に記述します。
routes.rbファイルは、Railsアプリを作成するときに自動作成されるファイルです。
ルーティングは、以下のように記述します。

♦️HTTPメソッド 'URL' => 'コントローラ#アクション'


②HTTPメソッドとは
　♦️「HTTP（Hypertext Transfer Protocol）」
 　　　通信規約（プロトコル）の1つで、ユーザーが行いたい処理をサーバーに伝える役割をする。
　♦️「HTTPリクエスト」
　　　ユーザーが行いたい処理をサーバーに伝えること。
　♦️「HTTPメソッド」
　　　HTTPリクエストをする際に、通信のやり取りの要求を定義したもの。

【代表的なHTTPメソッド】
⭐️GET：リソースの取得
　ブラウザからサーバーへURLを送信し、Webページを取得（GET）します。
　単にWebサイトを閲覧する際は、GETメソッドが使われます。

⭐️POST：リソースの更新、リソースへのデータ追加 など
　ブラウザからサーバーへ、URL以外のデータも送信（POST）して処理を命令します。
　会員情報の登録、記事投稿など、サーバーに情報を送信する際に使用します。

⭐️DELETE：リソースの削除
　ブラウザからサーバーへ、URL以外のデータ削除のための情報も送信して処理を命令します。
　会員情報の削除、記事削除など、情報を削除する際に使用します。


③ルーティングを記述する
Rails.application.routes.draw do

  get 'top' => 'homes#top'
end
今回は、URL「top」にアクセスしたときに、
homesコントローラのtopアクションが呼び出されるように設定しています。

-----------------------------------------------------------------------------------
8、Viewファイルを作成する

　ビューファイルは、作成できる場所が決まっています。以下のフォルダ内に保存する必要があります。

　⭐️app/views/コントローラ名⭐️

♦️ビューファイルの名前は、アクション名と同じ名前にするルールがあります。
　 このため、今回は、以下の名前で保存します。

　　　　top.html.erb

♦️Sublime Textでは、「homes」上で右クリックし、
　表示されるメニューで「New File」を選択することで、新規ファイルを作成できます。

-----------------------------------------------------------------------------------
９、アプリケーションサーバを起動する
アプリケーションを動かすには、サーバを起動している必要があります。
Railsには、開発環境用に用意されているサーバ（Puma）があるので、これを起動して動作を確認します。

以下のコマンドで起動できます。

⭐️[vagrant@localhost sample_app]$ rails server -b 0.0.0.0
　以下のように、短縮記述も可能です。

⭐️[vagrant@localhost sample_app]$ rails s -b 0.0.0.0

-----------------------------------------------------------------------------------
１０、アプリケーションサーバを起動する
サーバが正しく起動すると、アプリケーションにアクセスできるようになります。
Webrickサーバ（http://localhost:3000）に、routes.rbで設定したURL（top）を追加したものが最終的なURLです
http://localhost:3000/top

localhostは自分のPCを指します。「：」以後の番号（3000）はポート番号です。
Vagrantで作った開発環境は、自分のPCの3000番ポートを動かしているため、このURLになります。

-----------------------------------------------------------------------------------
１１、アプリケーションサーバを停止する
　サーバを起動している間は、ターミナルやTeraTermで他のコマンドが実行できません。
　加えて、アプリケーションはサーバを起動した時点の設定で動くため、
　コントローラやルーティングといったアプリケーションの設定に変更を加えた場合、その変更が正しく反映されません。

　　　　ですので、一通り動作確認が終わったら、サーバを停止する癖をつけましょう。

サーバーを起動した際のログに「Use Ctrl-C to stop」とありました通り、
Macの方はターミナル、Windowsの方はTeraTermで 
⭐️Ctrl + C を押してください。

-----------------------------------------------------------------------------------
１2、エラーが表示された場合
♦️プログラムの誤り（バグ）を見つけて修正する作業を「デバッグ（debug）」と呼びます。

⭐️Routing Error：ルーティングのエラー。主に２パターンがある。
　どちらの場合でも、エラー画面内の「Routes」に、
　現在設定されているルーティング一覧が表示されます。

①No route matches [GET] "/top"
　「ルートが見つかりません」というエラーです。
　　この場合は、routes.rbでうまく定義できていないことが多いです。
②Uninitialized constant HomesController
　「Homesコントローラが見つかりません」というエラーです。
　　homes_controller.rbのファイル名や、記述内容にミスがある場合が多いです。

⭐️ActionController::UnknownFormat
　Viewファイルが正しく作成できていない場合は、
　以下のような「テンプレートが見つかりません」というエラーが表示されます。
　このエラーが表示されたときは、top.html.erbファイルを置くディレクトリは正しいか、
　ファイル名にミスがないかを確認しましょう。

⭐️Unknown action
　「アクションが見つかりません」または「定義されていません」というエラーです。
　　homes_controller.rbにtopアクションは定義しているか、
　　 app/views/homesディレクトリにtop.html.erbが置けているかを確認しましょう。
