第章　投稿機能を作ろう

[ストロングパラメーター]
def list_params
params.require(:モデル名).permit(:カラム名１, :カラム名２...)
end

[コントローラーに定義するアクション一覧]
アクション名	役割
new	　　　　　データを新規作成する
create	　　　　　データを追加（保存）する
index	　　　　　データの一覧を表示する
show	　　　　　データの内容（詳細）を表示する
edit	　　　　　データを更新するためのフォームを作成する
update	　　　　　データを更新する
destroy　　　	データを削除する


 [投稿までの処理の流れ]
・フォーム画面を表示する
・フォームにデータを入力し、送信する
・送信内容をデータベースへ保存する
・リダイレクトする


１、フォームから投稿されたデータが保存されるまでの流れ
①フォームとは：ユーザーからのデータを受け付ける画面。
　(例)「お問い合わせ」「掲示板」「資料請求」「会員登録」「アンケート」など。
②フォーム画面のURLにアクセスして表示する。
③フォームにデータを入力し、送信する。
④送信内容をデータベースへ保存する。
　♦️内部で実行される処理はターミナルに表示されます。
　♦️ユーザーが入力して送信したデータは、コントローラが受け取り、データベースに保存されます。
　♦️保存されると、ターミナルには「commit transaction」と表示されます。
⑤リダイレクトする。
　「投稿」ボタンをクリックしたユーザーが
　「次にどこに行くのか？」決めておく指示を「リダイレクト」といいます。
　♦️リダイレクトは、Webページから別のWebページに自動的に移動（遷移）することです。

------------------------------------------------------------
２、コントローラと投稿機能のアクションを作成する
　アプリケーションの機能を制御するコントローラを作成する。
　ここでは「todolists」という名前にします。以下のように入力します。

♦️アクション付きコントローラの作成：$ rails g controller コントローラ名 アクション名
　(例)[vagrant@localhost sample_app]$ rails g controller todolists new

[アクション付きコマンドの実行]
$ rails g controller コントローラ名 アクション名

アクション付きコマンドを実行すると、以下の操作を自動で行ってくれます。
今回、newアクションを付けたことで投稿機能で利用するアクションも自動で生成されました。

 todolists_controller.rbに、newアクションを追加する（def new）
 app/views/todolists以下に、new.html.erbを作成する
 routes.rbに、new.html.erbまでのルーティングを作成する

コマンドを1つ追加するだけで、さまざまな機能が自動実行されるところにRailsの利便性があります。

------------------------------------------------------------
３、投稿用のフォームを作成する

フォームを作成する場合、HTMLでは<form>タグで送信フォームを設置します。
Railsにも、<form>タグを生成する便利な機能が用意されています。
今回は、その便利な機能の1つであるform_forヘルパーを使って作成していきます。

①form_forヘルパーとは
Railsには、Viewなどから呼び出す共通処理をまとめた「ヘルパーメソッド」が用意されています。
form_forヘルパー（以下、form_for）もその1つで、form_forを使うと、HTMLの<form>タグを作成できます。

form_forは、モデルを基にしてフォーム欄を作成します。このため、form_forを使うには、関連するモデルが必要です。
4章で作った「Listモデル」のインスタンス変数を、todolistsコントローラに定義しましょう。

②Railsテーブルの特徴
♦️Railsでテーブルを作成すると、「id」のカラムが自動的に生成されます。
♦️idのカラムには、id番号が順番に割り振られます。
　 同じidは存在しないので、このidによってレコードの中身を特定できます。

-----------------------------------------------------------------------------------
４、モデルはデータベースとのやり取りを簡単にしてくれる
　データベースとデータをやり取りするには、
　通常は、データベース言語（SQL：エスキューエル）でアクセスする必要があります。

　しかし、モデルを使うことでデーターベースとのやり取りが簡略化され、
　SQLを直接記述しなくても、データベース内にテーブルを作成できるようになります。

[⭐️インスタンス変数とは⭐️]　クラスのオブジェクト（インスタンス）がもつ変数の1つ。
♦️コントローラのインスタンス変数をViewと共有することで、
　コントローラからViewへのデータの受け渡しが行われます。
♦️インスタンス変数に代入した値は、そのオブジェクトがある限り、オブジェクトとともに存在し続けます。
♦️インスタンス変数の名前には、先頭に必ず@（アットマーク）を付けます。

(例)投稿用のフォームに渡すためのインスタンス変数をnewアクションに定義する。
app/controllers/todolists_controller.rb

class TodolistsController < ApplicationController 
  def new
    # Viewへ渡すためのインスタンス変数に空のモデルオブジェクトを生成する。
    @list = List.new  end
end

①アクションにインスタンス変数を定義する
②form_forでフォームを作成する

[⭐️form_forの基本形⭐️]
<%= form_for(@list, url: '/todolists') do |f| %>
<% end %>

form_forは、インスタンス変数を取得し、ブロック変数「f」に渡しています。
ちなみに、ここでのインスタンス変数は、コントローラのnewアクションで@listに渡しているList.newです。

[⭐️ブロック変数とは⭐️]
特定の範囲内で有効になる（使える）変数です。
今回は、form_forのdoからendまでが有効範囲です。

-----------------------------------------------------------------------------------
５、フォームオブジェクトを作成する

♦️<%で始まるタグは、Rubyで使われるタグです。
♦️<%　%>では、タグ内の結果が画面に表示されずに処理されます。
♦️<%=　%>では、タグ内の結果が画面に表示されます。

-----------------------------------------------------------------------------------
６、フォームで入力したデータの送信先を決める

new.html.erbファイルは、データの入力のみを担当しています。
フォームに入力した値がデータベースに保存されるように、ルーティングを設定しましょう。

①ルーティングを追加する
♦️GETは、<a>タグで画面遷移する場合に使う。
♦️POSTは、<form>タグ等でデータ送信する場合に使う。

②データの保存処理を行うcreateアクションを追加する
♦️データを新規登録するためのインスタンス作成
♦️データをデータベースに保存するためのsaveメソッド実行
♦️トップ画面へリダイレクト

-----------------------------------------------------------------------------------
７、データを新規登録するためのインスタンス作成

①privateは一種の境界線
「ここから下はcontrollerの中でしか呼び出せません」という意味があります。
他のアクション（index,show,createなど）を巻き込まないように
⭐️privateはControllerファイルの一番下のendのすぐ上に書いて下さい。
⭐️ストロングパラメータは、フォームの入力値をコントローラのcreateやupdateに渡す役割があります。
　ハッキングなどで不正に入力値を奪われないために、controllerの中でしか呼び出せないようにする役割もあります。


②メソッドの呼び出しに制限をかける
コントローラに「def list_params...」を直接書いてしまうと、アクションとして認識されてしまいます。
♦️しかし、「private」の行より下に記述することで、メソッドの呼び出しに制限をかけることができます。
♦️privateより後に定義されたメソッドは、アクションとして認識されなくなります。
♦️逆にnew,create,index,show,edit,update,destroyなどデータベースにアクセスしたり、
　ビューに表示したりするアクションは、privateの下に書くとエラーが発生します。
♦️なお、privateメソッドの名前は、「モデル名_params」とすることが多いです。


③list_paramsの定義：list_paramsではフォームで入力されたデータを受け取っています。

♦️params：Railsで送られてきた値を受け取るためのメソッド
♦️requireでデータのオブジェクト名(ここでは:list)を指定し、
♦️permitでキー（:title,:body）を指定しています。

これにより、list_paramsの中にフォームで入力されたデータが格納されます。



-----------------------------------------------------------------------------------
８、データをデータベースに保存するためのsaveメソッド実行
[DBにデータを保存するには]
①listインスタンスを生成し
②title, bodyに値をセットした後、
③「saveメソッド」を呼び出します。

[@のついたインスタンス変数とローカル変数の違いについて]
♦️@のついているインスタンス変数はビューファイルへ受け渡すことができます。
♦️一方でローカル変数は、ビューファイルに受け渡しができません。アクション内でしか利用できません。














