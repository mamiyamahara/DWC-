第四章　モデルとデータベースを用意しよう
 [まとめ]
・「データベース」は、「テーブル」「カラム」「レコード」の3要素で構成されている。
・モデルとテーブルは連動している。
・マイグレーションファイルを使うと、テーブルを作成できる。
・マイグレーションファイルの作成や修正時は、必ず「rails db:migrate」で実行する。
・カラムは、追加や削除を行える。


１、モデルとは
　アプリケーション固有のデータや処理を扱う部分です。
　データベースにアクセスして、データの登録や取得、更新、削除などの処理を行います。
⭐️app→modelsディレクトリ内にある「モデル名.rb」が、モデルのファイルです。

------------------------------------------------------------
２、データベースとは
　データを格納する保存先です。
　データベースを利用することで、データを効率的に保存したり、高速で検索できるようになります。

♦️テーブルを利用することで、情報が整理され、取り出しやすくなっています。
♦️データベースに関するファイルは、app→dbディレクトリ内に保存されています（dbは、Databaseの略）。
　 テーブル内のデータは、Excelの表形式のような構造で整理されているのが特徴です。

------------------------------------------------------------
３、テーブルの構造（レコードとカラム）

①縦1列のことを「カラム」、横1行のことを「レコード」と呼んでいます。
♦️各マス内に書く値は、必ず1つです。1行（レコード）は、関連付けられたデータの集合体です。

②Railsテーブルの特徴
♦️Railsでテーブルを作成すると、「id」のカラムが自動的に生成されます。
♦️idのカラムには、id番号が順番に割り振られます。
　 同じidは存在しないので、このidによってレコードの中身を特定できます。

-----------------------------------------------------------------------------------
４、モデルはデータベースとのやり取りを簡単にしてくれる
　データベースとデータをやり取りするには、
　通常は、データベース言語（SQL：エスキューエル）でアクセスする必要があります。

　しかし、モデルを使うことでデーターベースとのやり取りが簡略化され、
　SQLを直接記述しなくても、データベース内にテーブルを作成できるようになります。

-----------------------------------------------------------------------------------
５、モデルを作成する
①モデルを作成するコマンド
　⭐️rails g model モデル名

モデル名は、「List」のように、
♦️英数字の単数形で指定します。
♦️先頭は必ず英大文字で記述します。

[生成されるファイル]
♦️db/migrate/（作成日時）_create_lists.rb：
　「マイグレーションファイル」というデータベースの設計図になるファイルです。
♦️app/models/list.rb：モデルクラスはデータベースに対応したRubyのクラスです。
♦️test/models/list_test.rb：モデルクラスのテストコードのひな形です。
♦️test/fixtures/lists.yml：テストデータ作成のためのひな形です。

[⭐️マイグレーションファイルとは⭐️]
　テーブルの作成や変更を管理するファイル。
　このファイルに記述される内容によって、テーブル名やカラム名、テーブルの列などが決定します。

[テーブルの命名規則]
　テーブル名には、「モデル名の複数形」が自動的に割り振られます。
　コマンド実行時は「List」と単数形で書いたので、テーブル名は「lists」と複数形の英小文字になります。
　このようにRailsでは、命名の規則が厳密に決められています。

種類	         概要	                名前例
モデル名	         単数形、先頭は英大文字	List
モデルのファイル名	 単数形、先頭は英小文字	list.rb
テーブル名	         複数形、先頭は英小文字	lists

[モデルとテーブルのつながりは「モデル名」で決まる]
 情報は、テーブルに保存されます。テーブルに保存された情報を引き出すのは、そのテーブルに対応するモデルです。
 どのテーブルとモデルが関連付けられているかは、名前によって判断されます。
 このためRailsでは、命名の規則が厳密に決められているのです。

-----------------------------------------------------------------------------------
６、マイグレーションファイルを編集する
①「db/migrate/（作成日時）_create_lists.rb」ファイルを開く。

②マイグレーションファイルの書式

def change
  create_table :テーブル名 do |t|
    t.データ型 :カラム名
  end
end


③カラムの定義
♦️カラムの作成コマンド
　「t .string :カラム名」
   　カラム名のデータ型は、string型にします。

④マイグレーションでデータベースへ反映する
♦️マイグレーションファイルからテーブルを作成するコマンド
　「rails db：migrate」


⑤カラムの追加コマンド
♦️rails g migration Addカラム名Toテーブル名 カラム名：型名

(例「lists」テーブルに文字列型の「name」というカラムを追加したい場合)
$ rails g migration AddNameToLists name:string
$ rails db:migrate

⑥カラムの削除コマンド
♦️$ rails g migration Removeカラム名Fromテーブル名 カラム名:型名
(例)「name」カラムを削除したい場合
$ rails g migration RemoveNameFromLists name:string
$ rails db:migrate
-----------------------------------------------------------------------------------
